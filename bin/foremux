#!/usr/bin/env ruby
# frozen_string_literal: true

# Install in PATH as foremux

if %w[help --help -h].include?(ARGV.first)
  $stderr.puts <<~help
    Usage:
      foremux [PROCESS]
    Options:
      -e, [--env=ENV]           # Specify an env file to load, defaults to .env
      -d, [--root=ROOT]         # Default: Procfile directory
      -f, [--procfile=PROCFILE] # Default: Procfile
      -m, [--formation="alpha=5,bar=3"]
      -p, [--port=N]
      -x, [--exec=COMMAND]      # Run COMMAND in first pane in lieu of shell
    Start the application (or a specific PROCESS)
  help
  exit
end

require 'foreman/engine'
require 'foreman/cli'
require 'shellwords'

module Foremux
  class Engine < Foreman::Engine
    def start
      processes = @processes.dup
      arguments = ['tmux']
      processes.each_with_index do |process, idx|
        arguments << 'split-window' << '-h' << ';' if idx > 0
      end
      arguments.pop
      Kernel.system(*arguments)
      arguments = ['tmux']
      processes.each_with_index do |process, idx|
        arguments << 'select-pane' << '-t' << (idx + 1).to_s << ';'
        arguments << 'select-layout' << 'tiled' << ';' if idx.zero?
        arguments << 'send-keys' << '-t' << (idx + 1).to_s << command_for(process, nil) << 'C-m' << ';'
      end
      arguments.pop
      puts arguments.inspect
      Kernel.system(*arguments)
      exec(options[:exec]) if ENV['TMUX'] && options[:exec]
    end

    def command_for(process, n = 1)
      extra = {}
      extra = { 'PORT' => port_for(process, n).to_s } if n
      command = process.expanded_command(extra)
      env_command = 'env'
      env.merge(extra).each do |k, v|
        env_command << " #{k}=#{Shellwords.escape(v)}"
      end
      "cd #{Shellwords.escape(root)}; exec #{env_command} #{command}"
    end
  end

  class CLI < Foreman::CLI
    default_task :mux
    desc 'mux [PROCESS]', 'Start processes in individual tmux panes'

    method_option :exec,      type: :string,  aliases: '-x'
    method_option :env,       type: :string,  aliases: '-e'
    method_option :formation, type: :string,  aliases: '-m'
    method_option :port,      type: :numeric, aliases: '-p'

    def mux(command = nil)
      start(command)
    end

    no_tasks do
      def engine
        @engine ||= Foremux::Engine.new(options)
      end
    end
  end
end

ARGV.unshift('mux')
Foremux::CLI.start
