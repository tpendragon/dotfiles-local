colorscheme jellybeans
set background=dark
set maxmempattern=20000

:nnoremap <leader>w :w<Return>
:nnoremap <leader>wq :wq<Return>
:nnoremap <leader>e :Explore<Return>
:nnoremap <Leader>l :call RunAllSpecs()<CR>

:nnoremap <Leader>fj :%!python -m json.tool<CR>

" Run tests in tmux
let test#strategy = "tslime"
let g:test#preserve_screen = 1
nnoremap <Leader>a :TestSuite<CR>
nnoremap <Leader>t :TestFile<CR>
nnoremap <Leader>s :TestNearest<CR>
nnoremap <Leader>l :TestLast<CR>

nnoremap <Leader>b :call Send_to_Tmux("bundle install\n")<CR>
nnoremap <Leader>m :call Send_to_Tmux("migrate\n")<CR>
nnoremap <Leader>sv :AV<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>e :Explore<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>at :AT<CR>
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>to :tabonly<CR>
nnoremap <leader>wq :wq<CR>
nnoremap <leader>gri :Git rebase -i master<CR>
nnoremap <leader>ln :set rnu!<CR>

" Store clipboard.
set clipboard=unnamed
let g:tslime_always_current_session = 1
set statusline=%{fugitive#statusline()}\ %f
let g:markdown_enable_mappings = 0
let g:ale_virtualtext_cursor = 'disabled'
nnoremap <Leader>me :MarkdownEditBlock<CR>
vnoremap <Leader>me :MarkdownEditBlock<CR>
nnoremap <Leader>rc :Format<CR>
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
augroup ft_rb
    au!
    " fix the SLOOOW syntax highlighting
    au FileType ruby setlocal re=1 foldmethod=manual
augroup END
set re=0
autocmd FileType vue syntax sync fromstart
let g:ansible_vault_password_file = '/Users/tpendragon/.asdf/shims/lastpass-ansible'
set tags^=.git/tags;~

" COC Configuration
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>cl  <Plug>(coc-codelens-action)
inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
set updatetime=300
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" function! DebugMix(cmd) abort
"   if filereadable('mix.exs')
"     return 'iex --dbg pry -S '.a:cmd.' --trace'
"   endif
" endfunction
"
" let g:test#custom_transformations = {
"       \ 'iex_mix': function('DebugMix')
"       \ }
" let g:test#transformation = 'iex_mix'
let g:vim_markdown_folding_level = 6
let g:vim_markdown_folding_disabled = 1

:nnoremap <leader>toc :Toc<Return>
let g:mkdp_theme = 'light'
let g:test#javascript#runner = 'vitest'

augroup auFileTypes
  autocmd!
  autocmd FileType markdown setlocal textwidth=0
  autocmd FileType markdown setlocal wrap
  autocmd FileType markdown setlocal linebreak
  autocmd FileType hcl setlocal textwidth=0
  autocmd FileType hcl setlocal wrap
  autocmd FileType hcl setlocal linebreak
augroup end
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir
au BufRead,BufNewFile mix.lock set filetype=elixir
set termguicolors
let g:gruvbox_contrast_dark = 'hard'
set mouse=
