colorscheme railscasts
set background=light
set background=dark

:nnoremap <leader>w :w<Return>
:nnoremap <leader>wq :wq<Return>
:nnoremap <leader>e :Explore<Return>
:nnoremap <Leader>l :call RunAllSpecs()<CR>

:nnoremap <Leader>fj :%!python -m json.tool<CR>

set relativenumber
" let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'
let test#strategy = "tslime"
let g:test#preserve_screen = 1
nnoremap <Leader>a :TestSuite<CR>
nnoremap <Leader>t :TestFile<CR>
nnoremap <Leader>s :TestNearest<CR>
nnoremap <Leader>l :TestLast<CR>

nnoremap <Leader>b :call Send_to_Tmux("bundle install\n")<CR>
nnoremap <Leader>m :call Send_to_Tmux("migrate\n")<CR>
nnoremap <Leader>sv :AV<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>e :Explore<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>at :AT<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>to :tabonly<CR>
nnoremap <leader>wq :wq<CR>
nnoremap <leader>gri :Git rebase -i master<CR>
nnoremap <leader>ln :set rnu!<CR>
set clipboard=unnamed
let g:tslime_always_current_session = 1
set statusline=%{fugitive#statusline()}\ %f
let g:markdown_enable_mappings = 0
nnoremap <Leader>me :MarkdownEditBlock<CR>
vnoremap <Leader>me :MarkdownEditBlock<CR>
nnoremap <Leader>rc :Format<CR>
augroup ft_rb
    au!
    " fix the SLOOOW syntax highlighting
    au FileType ruby setlocal re=1 foldmethod=manual
augroup END
set re=1
" let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
" let g:ale_linters = {'vue': ['eslint', 'vls']}
" let g:ale_fixers = {
" \   'ruby': ['rubocop'],
" \   'elixir': ['mix_format'],
" \   'javascript': ['eslint'],
" \   'vue': ['eslint']
" \}
autocmd FileType vue syntax sync fromstart
let g:ansible_vault_password_file = '/Users/tpendragon/.asdf/shims/lastpass-ansible'
set tags^=.git/tags;~
" let g:ale_elixir_elixir_ls_release='~/Projects/elixir-ls/release'
" set omnifunc=ale#completion#OmniFunc

" COC Configuration
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
set updatetime=300
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Run Hyrax specs in the container.
function! HyraxRspec(cmd) abort
  call system("cat README.md | grep 'Hyrax'")
  if v:shell_error == 0
    return substitute(a:cmd, 'bundle exec \(.*\)', 'docker-compose exec -w /app/samvera/hyrax-engine app sh -c "bundle exec \1"', '')
  else
    return a:cmd
  endif
endfunction

let g:test#custom_transformations = {
      \ 'hyrax_ruby': function('HyraxRspec')
      \ }
let g:test#transformation = 'hyrax_ruby'
